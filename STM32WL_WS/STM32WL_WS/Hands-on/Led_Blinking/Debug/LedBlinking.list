
LedBlinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001afc  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001c34  08001c34  00011c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cd0  08001cd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cd0  08001cd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cd0  08001cd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd0  08001cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cd4  08001cd4  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001ce4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001ce4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b2c  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001340  00000000  00000000  00026b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  00027ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  00028880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a0a4  00000000  00000000  000291b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061bb  00000000  00000000  00043254  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a45ec  00000000  00000000  0004940f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed9fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026dc  00000000  00000000  000eda78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08001c1c 	.word	0x08001c1c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08001c1c 	.word	0x08001c1c

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 f900 	bl	80003b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f814 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f864 	bl	8000280 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_15);
 80001b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001bc:	4806      	ldr	r0, [pc, #24]	; (80001d8 <main+0x30>)
 80001be:	f000 fbe6 	bl	800098e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_9);
 80001c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c6:	4804      	ldr	r0, [pc, #16]	; (80001d8 <main+0x30>)
 80001c8:	f000 fbe1 	bl	800098e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80001cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d0:	f000 f964 	bl	800049c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_15);
 80001d4:	e7f0      	b.n	80001b8 <main+0x10>
 80001d6:	bf00      	nop
 80001d8:	48000400 	.word	0x48000400

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b09a      	sub	sp, #104	; 0x68
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0320 	add.w	r3, r7, #32
 80001e6:	2248      	movs	r2, #72	; 0x48
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f001 fd0e 	bl	8001c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]
 80001fe:	615a      	str	r2, [r3, #20]
 8000200:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000202:	4b1e      	ldr	r3, [pc, #120]	; (800027c <SystemClock_Config+0xa0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800020a:	4a1c      	ldr	r2, [pc, #112]	; (800027c <SystemClock_Config+0xa0>)
 800020c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000210:	6013      	str	r3, [r2, #0]
 8000212:	4b1a      	ldr	r3, [pc, #104]	; (800027c <SystemClock_Config+0xa0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800021a:	603b      	str	r3, [r7, #0]
 800021c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800021e:	2320      	movs	r3, #32
 8000220:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000226:	2300      	movs	r3, #0
 8000228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800022a:	23b0      	movs	r3, #176	; 0xb0
 800022c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022e:	2300      	movs	r3, #0
 8000230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0320 	add.w	r3, r7, #32
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fe7e 	bl	8000f38 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000242:	f000 f853 	bl	80002ec <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000246:	234f      	movs	r3, #79	; 0x4f
 8000248:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fa02 	bl	800166c <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800026e:	f000 f83d 	bl	80002ec <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3768      	adds	r7, #104	; 0x68
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	58000400 	.word	0x58000400

08000280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	2002      	movs	r0, #2
 8000296:	f7ff ff6f 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80002a0:	4811      	ldr	r0, [pc, #68]	; (80002e8 <MX_GPIO_Init+0x68>)
 80002a2:	f000 fb5d 	bl	8000960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_9;
 80002a6:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80002aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	2301      	movs	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4619      	mov	r1, r3
 80002bc:	480a      	ldr	r0, [pc, #40]	; (80002e8 <MX_GPIO_Init+0x68>)
 80002be:	f000 f9f1 	bl	80006a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80002c2:	2308      	movs	r3, #8
 80002c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002c6:	2302      	movs	r3, #2
 80002c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80002d2:	2305      	movs	r3, #5
 80002d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4619      	mov	r1, r3
 80002da:	4803      	ldr	r0, [pc, #12]	; (80002e8 <MX_GPIO_Init+0x68>)
 80002dc:	f000 f9e2 	bl	80006a4 <HAL_GPIO_Init>

}
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	48000400 	.word	0x48000400

080002ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <Error_Handler+0x6>

080002f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <NMI_Handler+0x4>

08000306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800030a:	e7fe      	b.n	800030a <HardFault_Handler+0x4>

0800030c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000310:	e7fe      	b.n	8000310 <MemManage_Handler+0x4>

08000312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000316:	e7fe      	b.n	8000316 <BusFault_Handler+0x4>

08000318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800031c:	e7fe      	b.n	800031c <UsageFault_Handler+0x4>

0800031e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr

08000336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr

08000342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000342:	b580      	push	{r7, lr}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000346:	f000 f88d 	bl	8000464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}

0800034e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
	...

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f7ff fff5 	bl	800034e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f001 fc1b 	bl	8001bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff0b 	bl	80001a8 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003a0:	08001cd8 	.word	0x08001cd8
  ldr r2, =_sbss
 80003a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003a8:	2000002c 	.word	0x2000002c

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003b6:	2300      	movs	r3, #0
 80003b8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ba:	2003      	movs	r0, #3
 80003bc:	f000 f940 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80003c0:	f001 fb36 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 80003c4:	4602      	mov	r2, r0
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <HAL_Init+0x3c>)
 80003c8:	601a      	str	r2, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003ca:	200f      	movs	r0, #15
 80003cc:	f000 f810 	bl	80003f0 <HAL_InitTick>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d002      	beq.n	80003dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80003d6:	2301      	movs	r3, #1
 80003d8:	71fb      	strb	r3, [r7, #7]
 80003da:	e001      	b.n	80003e0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80003dc:	f7ff ff8a 	bl	80002f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000000 	.word	0x20000000

080003f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80003f8:	2300      	movs	r3, #0
 80003fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <HAL_InitTick+0x6c>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d024      	beq.n	800044e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000404:	f001 fb14 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8000408:	4602      	mov	r2, r0
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <HAL_InitTick+0x6c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	4619      	mov	r1, r3
 8000410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000414:	fbb3 f3f1 	udiv	r3, r3, r1
 8000418:	fbb2 f3f3 	udiv	r3, r2, r3
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f934 	bl	800068a <HAL_SYSTICK_Config>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d10f      	bne.n	8000448 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b0f      	cmp	r3, #15
 800042c:	d809      	bhi.n	8000442 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800042e:	2200      	movs	r2, #0
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	f04f 30ff 	mov.w	r0, #4294967295
 8000436:	f000 f90e 	bl	8000656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800043a:	4a09      	ldr	r2, [pc, #36]	; (8000460 <HAL_InitTick+0x70>)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6013      	str	r3, [r2, #0]
 8000440:	e007      	b.n	8000452 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000442:	2301      	movs	r3, #1
 8000444:	73fb      	strb	r3, [r7, #15]
 8000446:	e004      	b.n	8000452 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e001      	b.n	8000452 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800044e:	2301      	movs	r3, #1
 8000450:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000452:	7bfb      	ldrb	r3, [r7, #15]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000008 	.word	0x20000008
 8000460:	20000004 	.word	0x20000004

08000464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <HAL_IncTick+0x1c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_IncTick+0x20>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4413      	add	r3, r2
 8000474:	4a03      	ldr	r2, [pc, #12]	; (8000484 <HAL_IncTick+0x20>)
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	20000008 	.word	0x20000008
 8000484:	20000028 	.word	0x20000028

08000488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  return uwTick;
 800048c:	4b02      	ldr	r3, [pc, #8]	; (8000498 <HAL_GetTick+0x10>)
 800048e:	681b      	ldr	r3, [r3, #0]
}
 8000490:	4618      	mov	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20000028 	.word	0x20000028

0800049c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a4:	f7ff fff0 	bl	8000488 <HAL_GetTick>
 80004a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	d005      	beq.n	80004c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_Delay+0x40>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c2:	bf00      	nop
 80004c4:	f7ff ffe0 	bl	8000488 <HAL_GetTick>
 80004c8:	4602      	mov	r2, r0
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d8f7      	bhi.n	80004c4 <HAL_Delay+0x28>
  {
  }
}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000008 	.word	0x20000008

080004e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f003 0307 	and.w	r3, r3, #7
 80004ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004fc:	4013      	ands	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000512:	4a04      	ldr	r2, [pc, #16]	; (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	60d3      	str	r3, [r2, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <__NVIC_GetPriorityGrouping+0x18>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	0a1b      	lsrs	r3, r3, #8
 8000532:	f003 0307 	and.w	r3, r3, #7
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	db0a      	blt.n	800056e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	490c      	ldr	r1, [pc, #48]	; (8000590 <__NVIC_SetPriority+0x4c>)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	0112      	lsls	r2, r2, #4
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	440b      	add	r3, r1
 8000568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800056c:	e00a      	b.n	8000584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4908      	ldr	r1, [pc, #32]	; (8000594 <__NVIC_SetPriority+0x50>)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f003 030f 	and.w	r3, r3, #15
 800057a:	3b04      	subs	r3, #4
 800057c:	0112      	lsls	r2, r2, #4
 800057e:	b2d2      	uxtb	r2, r2
 8000580:	440b      	add	r3, r1
 8000582:	761a      	strb	r2, [r3, #24]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000598:	b480      	push	{r7}
 800059a:	b089      	sub	sp, #36	; 0x24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	f1c3 0307 	rsb	r3, r3, #7
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	bf28      	it	cs
 80005b6:	2304      	movcs	r3, #4
 80005b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	3304      	adds	r3, #4
 80005be:	2b06      	cmp	r3, #6
 80005c0:	d902      	bls.n	80005c8 <NVIC_EncodePriority+0x30>
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3b03      	subs	r3, #3
 80005c6:	e000      	b.n	80005ca <NVIC_EncodePriority+0x32>
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	f04f 32ff 	mov.w	r2, #4294967295
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43da      	mvns	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	401a      	ands	r2, r3
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	43d9      	mvns	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	4313      	orrs	r3, r2
         );
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3724      	adds	r7, #36	; 0x24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800060c:	d301      	bcc.n	8000612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800060e:	2301      	movs	r3, #1
 8000610:	e00f      	b.n	8000632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <SysTick_Config+0x40>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061a:	210f      	movs	r1, #15
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f7ff ff90 	bl	8000544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <SysTick_Config+0x40>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <SysTick_Config+0x40>)
 800062c:	2207      	movs	r2, #7
 800062e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	e000e010 	.word	0xe000e010

08000640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff49 	bl	80004e0 <__NVIC_SetPriorityGrouping>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b086      	sub	sp, #24
 800065a:	af00      	add	r7, sp, #0
 800065c:	4603      	mov	r3, r0
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000664:	f7ff ff60 	bl	8000528 <__NVIC_GetPriorityGrouping>
 8000668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	6978      	ldr	r0, [r7, #20]
 8000670:	f7ff ff92 	bl	8000598 <NVIC_EncodePriority>
 8000674:	4602      	mov	r2, r0
 8000676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff61 	bl	8000544 <__NVIC_SetPriority>
}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ffb2 	bl	80005fc <SysTick_Config>
 8000698:	4603      	mov	r3, r0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b087      	sub	sp, #28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006b2:	e140      	b.n	8000936 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	2101      	movs	r1, #1
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	4013      	ands	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f000 8132 	beq.w	8000930 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d00b      	beq.n	80006ec <HAL_GPIO_Init+0x48>
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d007      	beq.n	80006ec <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e0:	2b11      	cmp	r3, #17
 80006e2:	d003      	beq.n	80006ec <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	2b12      	cmp	r3, #18
 80006ea:	d130      	bne.n	800074e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	2203      	movs	r2, #3
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4013      	ands	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	4313      	orrs	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000722:	2201      	movs	r2, #1
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43db      	mvns	r3, r3
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	4013      	ands	r3, r2
 8000730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	091b      	lsrs	r3, r3, #4
 8000738:	f003 0201 	and.w	r2, r3, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	4313      	orrs	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	2203      	movs	r2, #3
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43db      	mvns	r3, r3
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	4013      	ands	r3, r2
 8000764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	4313      	orrs	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d003      	beq.n	800078e <HAL_GPIO_Init+0xea>
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b12      	cmp	r3, #18
 800078c:	d123      	bne.n	80007d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	08da      	lsrs	r2, r3, #3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3208      	adds	r2, #8
 8000796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800079a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	220f      	movs	r2, #15
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	4013      	ands	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	691a      	ldr	r2, [r3, #16]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	f003 0307 	and.w	r3, r3, #7
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	08da      	lsrs	r2, r3, #3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3208      	adds	r2, #8
 80007d0:	6939      	ldr	r1, [r7, #16]
 80007d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	2203      	movs	r2, #3
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	4013      	ands	r3, r2
 80007ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f003 0203 	and.w	r2, r3, #3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4313      	orrs	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	2b00      	cmp	r3, #0
 8000814:	f000 808c 	beq.w	8000930 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000818:	4a4d      	ldr	r2, [pc, #308]	; (8000950 <HAL_GPIO_Init+0x2ac>)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	089b      	lsrs	r3, r3, #2
 800081e:	3302      	adds	r3, #2
 8000820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	f003 0303 	and.w	r3, r3, #3
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	2207      	movs	r2, #7
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000842:	d00d      	beq.n	8000860 <HAL_GPIO_Init+0x1bc>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a43      	ldr	r2, [pc, #268]	; (8000954 <HAL_GPIO_Init+0x2b0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d007      	beq.n	800085c <HAL_GPIO_Init+0x1b8>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a42      	ldr	r2, [pc, #264]	; (8000958 <HAL_GPIO_Init+0x2b4>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d101      	bne.n	8000858 <HAL_GPIO_Init+0x1b4>
 8000854:	2302      	movs	r3, #2
 8000856:	e004      	b.n	8000862 <HAL_GPIO_Init+0x1be>
 8000858:	2307      	movs	r3, #7
 800085a:	e002      	b.n	8000862 <HAL_GPIO_Init+0x1be>
 800085c:	2301      	movs	r3, #1
 800085e:	e000      	b.n	8000862 <HAL_GPIO_Init+0x1be>
 8000860:	2300      	movs	r3, #0
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	f002 0203 	and.w	r2, r2, #3
 8000868:	0092      	lsls	r2, r2, #2
 800086a:	4093      	lsls	r3, r2
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000872:	4937      	ldr	r1, [pc, #220]	; (8000950 <HAL_GPIO_Init+0x2ac>)
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	3302      	adds	r3, #2
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <HAL_GPIO_Init+0x2b8>)
 8000882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000886:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	43db      	mvns	r3, r3
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4013      	ands	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80008a6:	4a2d      	ldr	r2, [pc, #180]	; (800095c <HAL_GPIO_Init+0x2b8>)
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <HAL_GPIO_Init+0x2b8>)
 80008b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80008b4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <HAL_GPIO_Init+0x2b8>)
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <HAL_GPIO_Init+0x2b8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	43db      	mvns	r3, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d003      	beq.n	8000900 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <HAL_GPIO_Init+0x2b8>)
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_GPIO_Init+0x2b8>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <HAL_GPIO_Init+0x2b8>)
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	fa22 f303 	lsr.w	r3, r2, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	f47f aeb7 	bne.w	80006b4 <HAL_GPIO_Init+0x10>
  }
}
 8000946:	bf00      	nop
 8000948:	371c      	adds	r7, #28
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	40010000 	.word	0x40010000
 8000954:	48000400 	.word	0x48000400
 8000958:	48000800 	.word	0x48000800
 800095c:	58000800 	.word	0x58000800

08000960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
 800096c:	4613      	mov	r3, r2
 800096e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000970:	787b      	ldrb	r3, [r7, #1]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000976:	887a      	ldrh	r2, [r7, #2]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800097c:	e002      	b.n	8000984 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800097e:	887a      	ldrh	r2, [r7, #2]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800098e:	b480      	push	{r7}
 8000990:	b085      	sub	sp, #20
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009a0:	887a      	ldrh	r2, [r7, #2]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	4013      	ands	r3, r2
 80009a6:	041a      	lsls	r2, r3, #16
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	400b      	ands	r3, r1
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	619a      	str	r2, [r3, #24]
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	58000400 	.word	0x58000400

080009dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_PWREx_GetVoltageRange+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	58000400 	.word	0x58000400

080009f4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a04:	d101      	bne.n	8000a0a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	58000400 	.word	0x58000400

08000a18 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000a62:	d101      	bne.n	8000a68 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000a64:	2301      	movs	r3, #1
 8000a66:	e000      	b.n	8000a6a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa0:	6013      	str	r3, [r2, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000abc:	d101      	bne.n	8000ac2 <LL_RCC_HSE_IsReady+0x18>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <LL_RCC_HSE_IsReady+0x1a>
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b16:	d101      	bne.n	8000b1c <LL_RCC_HSI_IsReady+0x18>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <LL_RCC_HSI_IsReady+0x1a>
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	061b      	lsls	r3, r3, #24
 8000b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b40:	4313      	orrs	r3, r2
 8000b42:	604b      	str	r3, [r1, #4]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d101      	bne.n	8000b66 <LL_RCC_LSE_IsReady+0x18>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <LL_RCC_LSE_IsReady+0x1a>
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d101      	bne.n	8000bc8 <LL_RCC_LSI_IsReady+0x18>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <LL_RCC_LSI_IsReady+0x1a>
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6013      	str	r3, [r2, #0]
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d101      	bne.n	8000c20 <LL_RCC_MSI_IsReady+0x16>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <LL_RCC_MSI_IsReady+0x18>
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d101      	bne.n	8000c40 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c92:	4313      	orrs	r3, r2
 8000c94:	604b      	str	r3, [r1, #4]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f023 0203 	bic.w	r2, r3, #3
 8000cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	608b      	str	r3, [r1, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d3c:	f023 020f 	bic.w	r2, r3, #15
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	608b      	str	r3, [r1, #8]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e1e:	d101      	bne.n	8000e24 <LL_RCC_PLL_IsReady+0x18>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <LL_RCC_PLL_IsReady+0x1a>
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9a:	d101      	bne.n	8000ea0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ebe:	d101      	bne.n	8000ec4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee2:	d101      	bne.n	8000ee8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f04:	d101      	bne.n	8000f0a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f26:	d101      	bne.n	8000f2c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
	...

08000f38 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e38a      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f4a:	f7ff febc 	bl	8000cc6 <LL_RCC_GetSysClkSource>
 8000f4e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f50:	f7ff ff8f 	bl	8000e72 <LL_RCC_PLL_GetMainSource>
 8000f54:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80c9 	beq.w	80010f6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <HAL_RCC_OscConfig+0x3e>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	2b0c      	cmp	r3, #12
 8000f6e:	d17b      	bne.n	8001068 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d178      	bne.n	8001068 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f76:	f7ff fe48 	bl	8000c0a <LL_RCC_MSI_IsReady>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_OscConfig+0x54>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e369      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x72>
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fa8:	e006      	b.n	8000fb8 <HAL_RCC_OscConfig+0x80>
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d222      	bcs.n	8001002 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fd49 	bl	8001a58 <RCC_SetFlashLatencyFromMSIRange>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e347      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe3c 	bl	8000c78 <LL_RCC_MSI_SetCalibTrimming>
 8001000:	e021      	b.n	8001046 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fe23 	bl	8000c78 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fd0e 	bl	8001a58 <RCC_SetFlashLatencyFromMSIRange>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e30c      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001046:	f000 fcf3 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 800104a:	4602      	mov	r2, r0
 800104c:	4bb4      	ldr	r3, [pc, #720]	; (8001320 <HAL_RCC_OscConfig+0x3e8>)
 800104e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001050:	4bb4      	ldr	r3, [pc, #720]	; (8001324 <HAL_RCC_OscConfig+0x3ec>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f9cb 	bl	80003f0 <HAL_InitTick>
 800105a:	4603      	mov	r3, r0
 800105c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d047      	beq.n	80010f4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001064:	7cfb      	ldrb	r3, [r7, #19]
 8001066:	e2fb      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d02c      	beq.n	80010ca <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001070:	f7ff fdaf 	bl	8000bd2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001074:	f7ff fa08 	bl	8000488 <HAL_GetTick>
 8001078:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800107c:	f7ff fa04 	bl	8000488 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e2e8      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800108e:	f7ff fdbc 	bl	8000c0a <LL_RCC_MSI_IsReady>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f1      	beq.n	800107c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fdd8 	bl	8000c78 <LL_RCC_MSI_SetCalibTrimming>
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010ca:	f7ff fd90 	bl	8000bee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ce:	f7ff f9db 	bl	8000488 <HAL_GetTick>
 80010d2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010d6:	f7ff f9d7 	bl	8000488 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e2bb      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80010e8:	f7ff fd8f 	bl	8000c0a <LL_RCC_MSI_IsReady>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f1      	bne.n	80010d6 <HAL_RCC_OscConfig+0x19e>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d05f      	beq.n	80011c2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	2b08      	cmp	r3, #8
 8001106:	d005      	beq.n	8001114 <HAL_RCC_OscConfig+0x1dc>
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0c      	cmp	r3, #12
 800110c:	d10d      	bne.n	800112a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d10a      	bne.n	800112a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	f7ff fcc9 	bl	8000aaa <LL_RCC_HSE_IsReady>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d050      	beq.n	80011c0 <HAL_RCC_OscConfig+0x288>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d14c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e29a      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001148:	d102      	bne.n	8001150 <HAL_RCC_OscConfig+0x218>
 800114a:	f7ff fc92 	bl	8000a72 <LL_RCC_HSE_Enable>
 800114e:	e00d      	b.n	800116c <HAL_RCC_OscConfig+0x234>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001158:	d104      	bne.n	8001164 <HAL_RCC_OscConfig+0x22c>
 800115a:	f7ff fc5d 	bl	8000a18 <LL_RCC_HSE_EnableTcxo>
 800115e:	f7ff fc88 	bl	8000a72 <LL_RCC_HSE_Enable>
 8001162:	e003      	b.n	800116c <HAL_RCC_OscConfig+0x234>
 8001164:	f7ff fc93 	bl	8000a8e <LL_RCC_HSE_Disable>
 8001168:	f7ff fc64 	bl	8000a34 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d012      	beq.n	800119a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001174:	f7ff f988 	bl	8000488 <HAL_GetTick>
 8001178:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff f984 	bl	8000488 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e268      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800118e:	f7ff fc8c 	bl	8000aaa <LL_RCC_HSE_IsReady>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f1      	beq.n	800117c <HAL_RCC_OscConfig+0x244>
 8001198:	e013      	b.n	80011c2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119a:	f7ff f975 	bl	8000488 <HAL_GetTick>
 800119e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a2:	f7ff f971 	bl	8000488 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b64      	cmp	r3, #100	; 0x64
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e255      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80011b4:	f7ff fc79 	bl	8000aaa <LL_RCC_HSE_IsReady>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f1      	bne.n	80011a2 <HAL_RCC_OscConfig+0x26a>
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d04b      	beq.n	8001266 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_OscConfig+0x2a8>
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0c      	cmp	r3, #12
 80011d8:	d113      	bne.n	8001202 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d110      	bne.n	8001202 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e0:	f7ff fc90 	bl	8000b04 <LL_RCC_HSI_IsReady>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2be>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e234      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fc93 	bl	8000b26 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001200:	e031      	b.n	8001266 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d019      	beq.n	800123e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120a:	f7ff fc5f 	bl	8000acc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff f93b 	bl	8000488 <HAL_GetTick>
 8001212:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff f937 	bl	8000488 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e21b      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001228:	f7ff fc6c 	bl	8000b04 <LL_RCC_HSI_IsReady>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f1      	beq.n	8001216 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fc75 	bl	8000b26 <LL_RCC_HSI_SetCalibTrimming>
 800123c:	e013      	b.n	8001266 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123e:	f7ff fc53 	bl	8000ae8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001242:	f7ff f921 	bl	8000488 <HAL_GetTick>
 8001246:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff f91d 	bl	8000488 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e201      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800125c:	f7ff fc52 	bl	8000b04 <LL_RCC_HSI_IsReady>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f1      	bne.n	800124a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d06e      	beq.n	8001350 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d056      	beq.n	8001328 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001282:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69da      	ldr	r2, [r3, #28]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	429a      	cmp	r2, r3
 8001290:	d031      	beq.n	80012f6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1da      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80012b4:	f7ff fc6c 	bl	8000b90 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012b8:	f7ff f8e6 	bl	8000488 <HAL_GetTick>
 80012bc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff f8e2 	bl	8000488 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b11      	cmp	r3, #17
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1c6      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80012d2:	f7ff fc6d 	bl	8000bb0 <LL_RCC_LSI_IsReady>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f1      	bne.n	80012c0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e4:	f023 0210 	bic.w	r2, r3, #16
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f0:	4313      	orrs	r3, r2
 80012f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	f7ff fc3b 	bl	8000b70 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fa:	f7ff f8c5 	bl	8000488 <HAL_GetTick>
 80012fe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff f8c1 	bl	8000488 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b11      	cmp	r3, #17
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a5      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001314:	f7ff fc4c 	bl	8000bb0 <LL_RCC_LSI_IsReady>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f1      	beq.n	8001302 <HAL_RCC_OscConfig+0x3ca>
 800131e:	e017      	b.n	8001350 <HAL_RCC_OscConfig+0x418>
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001328:	f7ff fc32 	bl	8000b90 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff f8ac 	bl	8000488 <HAL_GetTick>
 8001330:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff f8a8 	bl	8000488 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b11      	cmp	r3, #17
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e18c      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001346:	f7ff fc33 	bl	8000bb0 <LL_RCC_LSI_IsReady>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f1      	bne.n	8001334 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80d8 	beq.w	800150e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800135e:	f7ff fb49 	bl	80009f4 <LL_PWR_IsEnabledBkUpAccess>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d113      	bne.n	8001390 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001368:	f7ff fb2a 	bl	80009c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136c:	f7ff f88c 	bl	8000488 <HAL_GetTick>
 8001370:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001374:	f7ff f888 	bl	8000488 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e16c      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001386:	f7ff fb35 	bl	80009f4 <LL_PWR_IsEnabledBkUpAccess>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f1      	beq.n	8001374 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d07b      	beq.n	8001490 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b85      	cmp	r3, #133	; 0x85
 800139e:	d003      	beq.n	80013a8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d109      	bne.n	80013bc <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013bc:	f7ff f864 	bl	8000488 <HAL_GetTick>
 80013c0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff f856 	bl	8000488 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e138      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80013ee:	f7ff fbae 	bl	8000b4e <LL_RCC_LSE_IsReady>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0ef      	beq.n	80013d8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b81      	cmp	r3, #129	; 0x81
 80013fe:	d003      	beq.n	8001408 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b85      	cmp	r3, #133	; 0x85
 8001406:	d121      	bne.n	800144c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff f83e 	bl	8000488 <HAL_GetTick>
 800140c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800141a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff f830 	bl	8000488 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e112      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ec      	beq.n	8001424 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800144a:	e060      	b.n	800150e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff f81c 	bl	8000488 <HAL_GetTick>
 8001450:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800145a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001466:	e00a      	b.n	800147e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff f80e 	bl	8000488 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	; 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0f0      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ec      	bne.n	8001468 <HAL_RCC_OscConfig+0x530>
 800148e:	e03e      	b.n	800150e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7fe fffa 	bl	8000488 <HAL_GetTick>
 8001494:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7fe ffec 	bl	8000488 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0ce      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80014c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ec      	bne.n	80014ac <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d2:	f7fe ffd9 	bl	8000488 <HAL_GetTick>
 80014d6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7fe ffcb 	bl	8000488 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0ad      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001504:	f7ff fb23 	bl	8000b4e <LL_RCC_LSE_IsReady>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ef      	bne.n	80014ee <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80a3 	beq.w	800165e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d076      	beq.n	800160c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	2b02      	cmp	r3, #2
 8001524:	d14b      	bne.n	80015be <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	f7ff fc63 	bl	8000df0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7fe ffad 	bl	8000488 <HAL_GetTick>
 800152e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7fe ffa9 	bl	8000488 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b0a      	cmp	r3, #10
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e08d      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001544:	f7ff fc62 	bl	8000e0c <LL_RCC_PLL_IsReady>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f1      	bne.n	8001532 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_RCC_OscConfig+0x730>)
 8001556:	4013      	ands	r3, r2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001560:	4311      	orrs	r1, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001566:	0212      	lsls	r2, r2, #8
 8001568:	4311      	orrs	r1, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800156e:	4311      	orrs	r1, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001574:	4311      	orrs	r1, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800157a:	430a      	orrs	r2, r1
 800157c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001580:	4313      	orrs	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001584:	f7ff fc26 	bl	8000dd4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001596:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7fe ff76 	bl	8000488 <HAL_GetTick>
 800159c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7fe ff72 	bl	8000488 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e056      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80015b2:	f7ff fc2b 	bl	8000e0c <LL_RCC_PLL_IsReady>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f1      	beq.n	80015a0 <HAL_RCC_OscConfig+0x668>
 80015bc:	e04f      	b.n	800165e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015be:	f7ff fc17 	bl	8000df0 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015cc:	f023 0303 	bic.w	r3, r3, #3
 80015d0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80015d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015dc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80015e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7fe ff4f 	bl	8000488 <HAL_GetTick>
 80015ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7fe ff4b 	bl	8000488 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b0a      	cmp	r3, #10
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e02f      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001600:	f7ff fc04 	bl	8000e0c <LL_RCC_PLL_IsReady>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f1      	bne.n	80015ee <HAL_RCC_OscConfig+0x6b6>
 800160a:	e028      	b.n	800165e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e023      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f003 0203 	and.w	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	429a      	cmp	r2, r3
 800162c:	d115      	bne.n	800165a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	429a      	cmp	r2, r3
 800163a:	d10e      	bne.n	800165a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	429a      	cmp	r2, r3
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	11c1808c 	.word	0x11c1808c

0800166c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e12c      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b98      	ldr	r3, [pc, #608]	; (80018e4 <HAL_RCC_ClockConfig+0x278>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d91b      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b95      	ldr	r3, [pc, #596]	; (80018e4 <HAL_RCC_ClockConfig+0x278>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 0207 	bic.w	r2, r3, #7
 8001696:	4993      	ldr	r1, [pc, #588]	; (80018e4 <HAL_RCC_ClockConfig+0x278>)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169e:	f7fe fef3 	bl	8000488 <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80016a6:	f7fe feef 	bl	8000488 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e110      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b8:	4b8a      	ldr	r3, [pc, #552]	; (80018e4 <HAL_RCC_ClockConfig+0x278>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d1ef      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d016      	beq.n	8001700 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fb00 	bl	8000cdc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80016dc:	f7fe fed4 	bl	8000488 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80016e4:	f7fe fed0 	bl	8000488 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0f1      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80016f6:	f7ff fbc7 	bl	8000e88 <LL_RCC_IsActiveFlag_HPRE>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f1      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b00      	cmp	r3, #0
 800170a:	d016      	beq.n	800173a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff faf6 	bl	8000d02 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001716:	f7fe feb7 	bl	8000488 <HAL_GetTick>
 800171a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800171e:	f7fe feb3 	bl	8000488 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0d4      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001730:	f7ff fbbb 	bl	8000eaa <LL_RCC_IsActiveFlag_C2HPRE>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f1      	beq.n	800171e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d016      	beq.n	8001774 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff faee 	bl	8000d2c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001750:	f7fe fe9a 	bl	8000488 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001758:	f7fe fe96 	bl	8000488 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0b7      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800176a:	f7ff fbb0 	bl	8000ece <LL_RCC_IsActiveFlag_SHDHPRE>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f1      	beq.n	8001758 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d016      	beq.n	80017ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fae7 	bl	8000d58 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800178a:	f7fe fe7d 	bl	8000488 <HAL_GetTick>
 800178e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001792:	f7fe fe79 	bl	8000488 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e09a      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80017a4:	f7ff fba5 	bl	8000ef2 <LL_RCC_IsActiveFlag_PPRE1>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f1      	beq.n	8001792 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d017      	beq.n	80017ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fadc 	bl	8000d7e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80017c6:	f7fe fe5f 	bl	8000488 <HAL_GetTick>
 80017ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80017ce:	f7fe fe5b 	bl	8000488 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e07c      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80017e0:	f7ff fb98 	bl	8000f14 <LL_RCC_IsActiveFlag_PPRE2>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f1      	beq.n	80017ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d043      	beq.n	800187e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d106      	bne.n	800180c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80017fe:	f7ff f954 	bl	8000aaa <LL_RCC_HSE_IsReady>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d11e      	bne.n	8001846 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e066      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d106      	bne.n	8001822 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001814:	f7ff fafa 	bl	8000e0c <LL_RCC_PLL_IsReady>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d113      	bne.n	8001846 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e05b      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800182a:	f7ff f9ee 	bl	8000c0a <LL_RCC_MSI_IsReady>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d108      	bne.n	8001846 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e050      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001838:	f7ff f964 	bl	8000b04 <LL_RCC_HSI_IsReady>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e049      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fa28 	bl	8000ca0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001850:	f7fe fe1a 	bl	8000488 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7fe fe16 	bl	8000488 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e035      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	f7ff fa2a 	bl	8000cc6 <LL_RCC_GetSysClkSource>
 8001872:	4602      	mov	r2, r0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	429a      	cmp	r2, r3
 800187c:	d1ec      	bne.n	8001858 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x278>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d21b      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_RCC_ClockConfig+0x278>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 0207 	bic.w	r2, r3, #7
 8001894:	4913      	ldr	r1, [pc, #76]	; (80018e4 <HAL_RCC_ClockConfig+0x278>)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800189c:	f7fe fdf4 	bl	8000488 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80018a4:	f7fe fdf0 	bl	8000488 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e011      	b.n	80018da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x278>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1ef      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018c4:	f000 f8b4 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_RCC_ClockConfig+0x27c>)
 80018cc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_RCC_ClockConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd8c 	bl	80003f0 <HAL_InitTick>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	58004000 	.word	0x58004000
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fe:	f7ff f9e2 	bl	8000cc6 <LL_RCC_GetSysClkSource>
 8001902:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001904:	f7ff fab5 	bl	8000e72 <LL_RCC_PLL_GetMainSource>
 8001908:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x2c>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d139      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d136      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800191c:	f7ff f985 	bl	8000c2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d115      	bne.n	8001952 <HAL_RCC_GetSysClockFreq+0x62>
 8001926:	f7ff f980 	bl	8000c2a <LL_RCC_MSI_IsEnabledRangeSelect>
 800192a:	4603      	mov	r3, r0
 800192c:	2b01      	cmp	r3, #1
 800192e:	d106      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x4e>
 8001930:	f7ff f98b 	bl	8000c4a <LL_RCC_MSI_GetRange>
 8001934:	4603      	mov	r3, r0
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	e005      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x5a>
 800193e:	f7ff f98f 	bl	8000c60 <LL_RCC_MSI_GetRangeAfterStandby>
 8001942:	4603      	mov	r3, r0
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x134>)
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	e014      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x8c>
 8001952:	f7ff f96a 	bl	8000c2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8001956:	4603      	mov	r3, r0
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_RCC_GetSysClockFreq+0x7a>
 800195c:	f7ff f975 	bl	8000c4a <LL_RCC_MSI_GetRange>
 8001960:	4603      	mov	r3, r0
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	e005      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x86>
 800196a:	f7ff f979 	bl	8000c60 <LL_RCC_MSI_GetRangeAfterStandby>
 800196e:	4603      	mov	r3, r0
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x134>)
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d115      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001988:	e012      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d102      	bne.n	8001996 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x138>)
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00c      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b08      	cmp	r3, #8
 800199a:	d109      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800199c:	f7ff f858 	bl	8000a50 <LL_RCC_HSE_IsEnabledDiv2>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x138>)
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e001      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x13c>)
 80019ae:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b0:	f7ff f989 	bl	8000cc6 <LL_RCC_GetSysClkSource>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d12e      	bne.n	8001a18 <HAL_RCC_GetSysClockFreq+0x128>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80019ba:	f7ff fa5a 	bl	8000e72 <LL_RCC_PLL_GetMainSource>
 80019be:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d002      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0xdc>
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0xe2>
 80019ca:	e00d      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xf8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x138>)
 80019ce:	60fb      	str	r3, [r7, #12]
        break;
 80019d0:	e00d      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0xfe>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80019d2:	f7ff f83d 	bl	8000a50 <LL_RCC_HSE_IsEnabledDiv2>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d102      	bne.n	80019e2 <HAL_RCC_GetSysClockFreq+0xf2>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x138>)
 80019de:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80019e0:	e005      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0xfe>
          pllinputfreq = HSE_VALUE;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x13c>)
 80019e4:	60fb      	str	r3, [r7, #12]
        break;
 80019e6:	e002      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0xfe>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	60fb      	str	r3, [r7, #12]
        break;
 80019ec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80019ee:	f7ff fa1e 	bl	8000e2e <LL_RCC_PLL_GetN>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	fb03 f402 	mul.w	r4, r3, r2
 80019fa:	f7ff fa2f 	bl	8000e5c <LL_RCC_PLL_GetDivider>
 80019fe:	4603      	mov	r3, r0
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	3301      	adds	r3, #1
 8001a04:	fbb4 f4f3 	udiv	r4, r4, r3
 8001a08:	f7ff fa1d 	bl	8000e46 <LL_RCC_PLL_GetR>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	0f5b      	lsrs	r3, r3, #29
 8001a10:	3301      	adds	r3, #1
 8001a12:	fbb4 f3f3 	udiv	r3, r4, r3
 8001a16:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001a18:	697b      	ldr	r3, [r7, #20]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	08001c90 	.word	0x08001c90
 8001a28:	00f42400 	.word	0x00f42400
 8001a2c:	01e84800 	.word	0x01e84800

08001a30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a30:	b598      	push	{r3, r4, r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001a34:	f7ff ff5c 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	f7ff f9b3 	bl	8000da4 <LL_RCC_GetAHBPrescaler>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x24>)
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd98      	pop	{r3, r4, r7, pc}
 8001a54:	08001c50 	.word	0x08001c50

08001a58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	4a10      	ldr	r2, [pc, #64]	; (8001aac <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001a70:	f7ff f9a3 	bl	8000dba <LL_RCC_GetAHB3Prescaler>
 8001a74:	4603      	mov	r3, r0
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9c      	lsrs	r4, r3, #18
 8001a94:	f7fe ffa2 	bl	80009dc <HAL_PWREx_GetVoltageRange>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f000 f80b 	bl	8001ab8 <RCC_SetFlashLatency>
 8001aa2:	4603      	mov	r3, r0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	08001c90 	.word	0x08001c90
 8001ab0:	08001c50 	.word	0x08001c50
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	; 0x38
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001ac2:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <RCC_SetFlashLatency+0xfc>)
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001acc:	6018      	str	r0, [r3, #0]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001ad2:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <RCC_SetFlashLatency+0x100>)
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001adc:	6018      	str	r0, [r3, #0]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001ae2:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <RCC_SetFlashLatency+0x104>)
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af8:	d11d      	bne.n	8001b36 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
 8001afe:	e016      	b.n	8001b2e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b08:	4413      	add	r3, r2
 8001b0a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d808      	bhi.n	8001b28 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b1e:	4413      	add	r3, r2
 8001b20:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001b26:	e023      	b.n	8001b70 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d9e5      	bls.n	8001b00 <RCC_SetFlashLatency+0x48>
 8001b34:	e01c      	b.n	8001b70 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b3a:	e016      	b.n	8001b6a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b44:	4413      	add	r3, r2
 8001b46:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d808      	bhi.n	8001b64 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001b62:	e005      	b.n	8001b70 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	3301      	adds	r3, #1
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d9e5      	bls.n	8001b3c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <RCC_SetFlashLatency+0x108>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 0207 	bic.w	r2, r3, #7
 8001b78:	4911      	ldr	r1, [pc, #68]	; (8001bc0 <RCC_SetFlashLatency+0x108>)
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001b80:	f7fe fc82 	bl	8000488 <HAL_GetTick>
 8001b84:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001b86:	e008      	b.n	8001b9a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b88:	f7fe fc7e 	bl	8000488 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e007      	b.n	8001baa <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <RCC_SetFlashLatency+0x108>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1ef      	bne.n	8001b88 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3738      	adds	r7, #56	; 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	08001c34 	.word	0x08001c34
 8001bb8:	08001c3c 	.word	0x08001c3c
 8001bbc:	08001c44 	.word	0x08001c44
 8001bc0:	58004000 	.word	0x58004000

08001bc4 <__libc_init_array>:
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	4e0d      	ldr	r6, [pc, #52]	; (8001bfc <__libc_init_array+0x38>)
 8001bc8:	4c0d      	ldr	r4, [pc, #52]	; (8001c00 <__libc_init_array+0x3c>)
 8001bca:	1ba4      	subs	r4, r4, r6
 8001bcc:	10a4      	asrs	r4, r4, #2
 8001bce:	2500      	movs	r5, #0
 8001bd0:	42a5      	cmp	r5, r4
 8001bd2:	d109      	bne.n	8001be8 <__libc_init_array+0x24>
 8001bd4:	4e0b      	ldr	r6, [pc, #44]	; (8001c04 <__libc_init_array+0x40>)
 8001bd6:	4c0c      	ldr	r4, [pc, #48]	; (8001c08 <__libc_init_array+0x44>)
 8001bd8:	f000 f820 	bl	8001c1c <_init>
 8001bdc:	1ba4      	subs	r4, r4, r6
 8001bde:	10a4      	asrs	r4, r4, #2
 8001be0:	2500      	movs	r5, #0
 8001be2:	42a5      	cmp	r5, r4
 8001be4:	d105      	bne.n	8001bf2 <__libc_init_array+0x2e>
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
 8001be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bec:	4798      	blx	r3
 8001bee:	3501      	adds	r5, #1
 8001bf0:	e7ee      	b.n	8001bd0 <__libc_init_array+0xc>
 8001bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bf6:	4798      	blx	r3
 8001bf8:	3501      	adds	r5, #1
 8001bfa:	e7f2      	b.n	8001be2 <__libc_init_array+0x1e>
 8001bfc:	08001cd0 	.word	0x08001cd0
 8001c00:	08001cd0 	.word	0x08001cd0
 8001c04:	08001cd0 	.word	0x08001cd0
 8001c08:	08001cd4 	.word	0x08001cd4

08001c0c <memset>:
 8001c0c:	4402      	add	r2, r0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d100      	bne.n	8001c16 <memset+0xa>
 8001c14:	4770      	bx	lr
 8001c16:	f803 1b01 	strb.w	r1, [r3], #1
 8001c1a:	e7f9      	b.n	8001c10 <memset+0x4>

08001c1c <_init>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	bf00      	nop
 8001c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c22:	bc08      	pop	{r3}
 8001c24:	469e      	mov	lr, r3
 8001c26:	4770      	bx	lr

08001c28 <_fini>:
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	bf00      	nop
 8001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2e:	bc08      	pop	{r3}
 8001c30:	469e      	mov	lr, r3
 8001c32:	4770      	bx	lr
